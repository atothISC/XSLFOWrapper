<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="ZEN.Report.FOWrapper">
<Description><![CDATA[
This ZEN Report class is a wrapper for any XSL-FO files, from which you want to generate a PDF file using the ZEN Report framework and
 especially the <a href="http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GRPT_report_running#GRPT_renderserver">HotJVM Render Server</a> 
 feature, which is at the moment not available for direct XSL-FO -> PDF genearation out-of-the-box.
<p>This adds a few extra lines to the beginning and the end of your XSL-FO file to make it usable with this class: 
<div class="SampleCode" style="padding:1em;">
<div>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div>
<div style="color:red;font-style:italic;">&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;</div>
<div style="color:red;font-style:italic;">&lt;xsl:template match="/"&gt;</div>
<div>&lt;fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:zr="http://www.intersystems.com/zenreports" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:svg="http://www.w3.org/2000/svg"&gt;</div>
<div>&nbsp;&nbsp;&lt;!-- XSL-FO content --&gt;</div>
<div>&lt;/fo:root&gt;</div>
<div style="color:red;font-style:italic;">&lt;/xsl:template&gt;</div>
<div style="color:red;font-style:italic;">&lt;/xsl:stylesheet&gt;</div>
</div>
<p>The report can be started either via HTTP request (from a browser) or from the background, using the
 <a href="%25CSP.Documatic.cls?PAGE=CLASS&CLASSNAME=%25ZEN.Report.reportPage#GenerateReport">GenerateReport()</a> 
 or the <a href="%25CSP.Documatic.cls?PAGE=CLASS&CLASSNAME=%25ZEN.Report.reportPage#AsynchGenerateReport">AsynchGenerateReport()</a> method!</p>]]></Description>
<Super>%ZEN.Report.reportPage</Super>

<Parameter name="DEFAULTMODE">
<Description><![CDATA[
Specifies the default display mode used for this report if
the URL parameter, <var>$MODE</var>, is not present.]]></Description>
<Type>STRING</Type>
<Default>xml</Default>
</Parameter>

<Parameter name="DEFAULTCALLBACKCLASS">
<Description><![CDATA[
Default value for the <property>CallbackClass</property> property. This can be set in subclasses!]]></Description>
</Parameter>

<Parameter name="DEFAULTCALLBACKMETHOD">
<Description><![CDATA[
Default value for the <property>CallbackMethod</property> property. This can be set in subclasses!]]></Description>
</Parameter>

<Property name="FOStream">
<Description><![CDATA[
This is the XSL-FO stream to be used for the purposes of report generation.
<p>It can be set directly, or indirectly, via the <property>FOFilename</property>, or 
 the <property>CallbackClass</property> and the <property>CallbackMethod</property> properties.
<br/>If it is set directly, the other properties are ignored.</p>]]></Description>
<Type>%Stream.TmpCharacter</Type>
</Property>

<Property name="FOFilename">
<Description><![CDATA[
This is the full server-side path of the XSL-FO file. If it's not empty, the referenced file must exists 
 in the server's filesystem, in a location, where the logged in user can open and read it!
<p>If the <property>FOStream</property> is provided directly, 
 or the <property>CallbackClass</property> and the <property>CallbackMethod</property> are not empty, 
 and referring a valid class and method name, then this is ignored.</p>]]></Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="ZENURL" value="FOFILENAME"/>
</Property>

<Property name="CallbackClass">
<Description><![CDATA[
If this and the <property>CallbackMethod</property> are not empty and referring a valid class and method name,
 then the return value of the corresponding classmethod (which should be a character stream) is used as the XSL-FO file.
<p>These properties are ignored too, if the <property>FOStream</property> is provided directly.</p>]]></Description>
<Type>%String</Type>
<InitialExpression>..#DEFAULTCALLBACKCLASS</InitialExpression>
<Parameter name="ZENURL" value="CLASS"/>
</Property>

<Property name="CallbackMethod">
<Description><![CDATA[
If this and the <property>CallbackClass</property> are not empty and referring a valid class and method name,
 then the return value of the corresponding classmethod (which should be a character stream) is used as the XSL-FO file.
<p>These properties are ignored too, if the <property>FOStream</property> is provided directly.</p>]]></Description>
<Type>%String</Type>
<InitialExpression>..#DEFAULTCALLBACKMETHOD</InitialExpression>
<Parameter name="ZENURL" value="METHOD"/>
</Property>

<Method name="%OnBeforeReport">
<Description>
This callback is invoked after this report is instantiated
and before it is run.</Description>
<Internal>1</Internal>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim fostream As %Stream.Object = ""
	#dim ex As %Exception.AbstractException = ""
	#dim tSC As %Status = $$$OK
	
	If ($IsObject(..FOStream) && (..FOStream.Size > 0)) {
		Set fostream = ..FOStream
	}
	ElseIf (..CallbackClass '= "") && (..CallbackMethod '= "") {
		TRY {
			Set tSC = $CLASSMETHOD(..CallbackClass, ..CallbackMethod, .fostream)
		}
		CATCH ex {
			Set tSC = ex.AsStatus()
		}
	}
	Else {
		Set fostream = ##class(%Stream.FileCharacter).%New()
		Set tSC = fostream.LinkToFile(..FOFilename)
	}
	
	If $$$ISOK(tSC) {
		// TODO: automatically append XSLT frame around the XSL-FO file.
		Set ..toxslfostream = ..TransformFO2XSL(.fostream)
		Do ..toxslfostream.Rewind()
	}
		
	Quit tSC
]]></Implementation>
</Method>

<XData name="ReportDefinition">
<Description>
This report has a "fake" XML definition. Basically any XML would do, because the XSL-FO file is created outside of the ZEN Report class.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="FO2PDFReport" call="FakeXML">
<!-- add definition of the report here. -->
</report>]]></Data>
</XData>

<Method name="FakeXML">
<Description><![CDATA[
Method, which generates the "fake" XML content of the report.
At the moment this contains a single element (<fofile>), which reflects the parameters of the report.']]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Write "<fofile" _ 
		$Case(%report.FOFilename, "": "", : " name=""" _ ##class(%File).NormalizeFilename(%report.FOFilename) _ """") _
		$Case(%report.CallbackClass, "": "", : " callbackClass=""" _ %report.CallbackClass _ """") _
		$Case(%report.CallbackMethod, "": "", : " callbackMethod=""" _ %report.CallbackMethod _ """") _
		"></fofile>"
]]></Implementation>
</Method>

<Method name="TestFO2PDFFromStream">
<Description><![CDATA[
This method can be used to test background generation of the PDF from an XSL-FO stream.
<p>
<var>pOutputFile</var> is the (server-side) full path of the expected output file (PDF).<br/>
<var>pFoStream</var> is the XSL-FO stream to be used. For testing purposes: if this parameter is empty,
 than the content of the <property>TestXSLFO</property> XData block is used.<br/>
<var>pDisplayLog</var> is 0 by default, if it's set to 1, the output file will contain the output of the FOP log instead of the PDF.</br>
<var>pRenderServer</var> is empty by default. If a HotJVM Render Server is used to boost the performance of the PDF generation, 
 then this argument has to contain the port number of the configured render server. For deatailed documentation see the
 <a href="http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GRPT_report_running#GRPT_renderserver">HotJVM Render Server documentation!</a>
</p>

<example>Set tSC = ##class(ZEN.Report.FOWrapper).TestFO2PDFFromStream("outfile") Write !,+tSC</example>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOutputFile:%String,pFoStream:%Stream.Object,pDisplayLog:%Boolean=0,pRenderServer:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim ex As %Exception.AbstractException = ""
	#dim tSC As %Status = $$$OK

	#dim report As ZEN.Report.FOWrapper = ..%New()
	If $IsObject($Get(pFoStream)) {
		Set tSC = report.FOStream.CopyFrom(pFoStream)
	}
	Else {
		#dim xdata As %Dictionary.XDataDefinition = ##class(%Dictionary.XDataDefinition).%OpenId(..%ClassName(1) _ "||TestXSLFO", -1, .tSC)
		// The XData doesn't include the XML header
		Set tSC = report.FOStream.WriteLine("<?xml version=""1.0"" encoding=""utf-8""?>")
		
		Do xdata.Data.Rewind()
		While $$$ISOK(tSC) && ('xdata.Data.AtEnd) {
			Set tSC = report.FOStream.Write(xdata.Data.Read(32000))
		}
	}
	
	If $$$ISOK(tSC) {
		Do report.FOStream.Rewind()
		Set tSC = report.GenerateReport(pOutputFile, 2, pDisplayLog, pRenderServer)
	}
	
	Quit tSC
]]></Implementation>
</Method>

<XData name="TestXSLFO">
<Description><![CDATA[
Sample XData stream used by the <property>TestFO2PDFFromStream</property> method.]]></Description>
<Data><![CDATA[
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
<fo:layout-master-set>
<fo:simple-page-master master-name="simple" page-height="29.7cm" page-width="21cm" margin-top="1cm" margin-bottom="2cm" margin-left="2.5cm" margin-right="2.5cm">
<fo:region-body margin-top="3cm"/>
<fo:region-before extent="3cm"/>
<fo:region-after extent="1.5cm"/>
</fo:simple-page-master>
</fo:layout-master-set>
<fo:page-sequence master-reference="simple">
<fo:flow flow-name="xsl-region-body">
<fo:block font-size="18pt" font-family="sans-serif" line-height="24pt" space-after.optimum="15pt" background-color="blue" color="white" text-align="center" padding-top="3pt">XSLFOWrapper from <a href="https://openexchange.intersystems.com/package/XSLFOWrapper">InterSystems Open Exchange</a></fo:block>
</fo:flow>
</fo:page-sequence>
</fo:root>]]></Data>
</XData>

<Method name="TestFO2PDFFromFile">
<Description><![CDATA[
This method can be used to test background generation of the PDF from an XSL-FO file.
<p>
<var>pOutputFile</var> is the (server-side) full path of the expected output file (PDF).<br/>
<var>pFoFilename</var> is the (server-side) full path of the XSL-FO input file.<br/>
<var>pDisplayLog</var> is 0 by default, if it's set to 1, the output file will contain the output of the FOP log instead of the PDF.</br>
<var>pRenderServer</var> is empty by default. If a HotJVM Render Server is used to boost the performance of the PDF generation, 
 then this argument has to contain the port number of the configured render server. For deatailed documentation see the
 <a href="http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GRPT_report_running#GRPT_renderserver">HotJVM Render Server documentation!</a>
</p>

<example>Set tSC = ##class(ZEN.Report.FOWrapper).TestFO2PDFFromFile("outfile", "fofile") Write !,+tSC</example>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOutputFile:%String,pFoFilename:%String,pDisplayLog:%Boolean=0,pRenderServer:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	
	#dim report As ZEN.Report.FOWrapper = ..%New()
	Set report.FOFilename = pFoFilename
	
	Set tSC = report.GenerateReport(pOutputFile, 2, pDisplayLog, pRenderServer)
	Quit tSC
]]></Implementation>
</Method>

<Method name="TestFO2PDFFromMethod">
<Description><![CDATA[
This method can be used to test background generation of the PDF from a callback method.
<p>
<var>pOutputFile</var> is the (server-side) full path of the expected output file (PDF).<br/>
<var>pFoFilename</var> is the (server-side) full path of the XSL-FO input file.<br/>
<var>pDisplayLog</var> is 0 by default, if it's set to 1, the output file will contain the output of the FOP log instead of the PDF.</br>
<var>pRenderServer</var> is empty by default. If a HotJVM Render Server is used to boost the performance of the PDF generation, 
 then this argument has to contain the port number of the configured render server. For deatailed documentation see the
 <a href="http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GRPT_report_running#GRPT_renderserver">HotJVM Render Server documentation!</a>
</p>

<example>Set tSC = ##class(ZEN.Report.FOWrapper).TestFO2PDFFromMethod("outfile") Write !,+tSC</example>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOutputFile:%String,pDisplayLog:%Boolean=0,pRenderServer:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	
	#dim report As ZEN.Report.FOWrapper = ..%New()
	Set report.CallbackClass = ..%ClassName(1)
	Set report.CallbackMethod = "FO2PDFCallback"
	
	Set tSC = report.GenerateReport(pOutputFile, 2, pDisplayLog, pRenderServer)
	Quit tSC
]]></Implementation>
</Method>

<Method name="FO2PDFCallback">
<Description><![CDATA[
Sample callback method used by the <property>TestFO2PDFFromMethod</property> method.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pStream:%Stream.Object]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	If '$IsObject($Get(pStream)) {
		Set pStream = ##class(%Stream.TmpCharacter).%New()
	} 
	
	Do pStream.Rewind()
	Do pStream.WriteLine("<?xml version=""1.0"" encoding=""utf-8""?>")
	Do pStream.WriteLine("<fo:root xmlns:fo=""http://www.w3.org/1999/XSL/Format"">")
	Do pStream.WriteLine("<fo:layout-master-set>")
	Do pStream.WriteLine("<fo:simple-page-master master-name=""simple"" page-height=""29.7cm"" page-width=""21cm"" margin-top=""1cm"" margin-bottom=""2cm"" margin-left=""2.5cm"" margin-right=""2.5cm"">")
	Do pStream.WriteLine("<fo:region-body margin-top=""3cm""/>")
	Do pStream.WriteLine("<fo:region-before extent=""3cm""/>")
	Do pStream.WriteLine("<fo:region-after extent=""1.5cm""/>")
	Do pStream.WriteLine("</fo:simple-page-master>")
	Do pStream.WriteLine("</fo:layout-master-set>")
	Do pStream.WriteLine("<fo:page-sequence master-reference=""simple"">")
	Do pStream.WriteLine("<fo:flow flow-name=""xsl-region-body"">")
	Do pStream.WriteLine("<fo:block font-size=""18pt"" font-family=""sans-serif"" line-height=""24pt"" space-after.optimum=""15pt"" background-color=""blue"" color=""white"" text-align=""center"" padding-top=""3pt"">XSLFOWrapper from <a href=""https://openexchange.intersystems.com/package/XSLFOWrapper"">InterSystems Open Exchange</a></fo:block>")
	Do pStream.WriteLine("</fo:flow>")
	Do pStream.WriteLine("</fo:page-sequence>")
	Do pStream.WriteLine("</fo:root>")

	Quit tSC
]]></Implementation>
</Method>

<Method name="TransformFO2XSL">
<Description>
Appends the XSLT frame around the original XSL-FO stream, to make it usable with this report class.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pFOStream:%Stream.Object]]></FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim xslStream As %Stream.TmpCharacter = ##class(%Stream.TmpCharacter).%New()
	
	Do pFOStream.Rewind()
	Set first100 = pFOStream.Read(100)
	If $Extract(first100, 1, 2) = "<?" {
		Set xmlHeader = $Piece(first100, ">", 1) _ ">"
		Set first100 = $Piece(first100, ">", 2, *)
	}
	Else {
		Set xmlHeader = "" 
	}
	
	Do xslStream.WriteLine($Select(
		xmlHeader '= "": xmlHeader,
		1: "<?xml version=""1.0"" encoding=""utf-8""?>"))
	Do xslStream.WriteLine("<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">")
	Do xslStream.WriteLine("<xsl:template match=""/"">")
	Do xslStream.Write(first100)
	While 'pFOStream.AtEnd {
		Do xslStream.Write(pFOStream.Read(32000))
	}
	Do xslStream.WriteLine("</xsl:template>")
	Do xslStream.WriteLine("</xsl:stylesheet>")

	Quit xslStream
]]></Implementation>
</Method>
</Class>
</Export>
